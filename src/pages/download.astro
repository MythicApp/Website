---
import Layout from "../layouts/Layout.astro";
import FeatureSection from "../components/sections/FeatureSection.astro";
import { features } from "./index.astro";
---

<Layout title="Thanks for downloading!">
  <h1 class="mythic-gradient-text">Thanks for downloading Mythic!</h1>
  <p>
    You're just a few seconds away from greatness... (<span id="countdown-timer"
      >3</span
    >)
  </p>
  <p>
    If your download hasn't started, please <a
      href="#"
      onclick="fetchLatestRelease()">click here</a
    >.
  </p>
  <p>
    Please note that for newer versions of macOS, you may need to toggle the
    'Allow apps from' setting in System Settings &gt; Privacy & Security &gt;
    Security to 'Anywhere'.
  </p>
  <p>
    For any concerns, please consult the <a href="/faq">FAQ</a> or join the <a
      href="/discord">Discord</a
    >.
  </p>

  <div class="marquee-container">
    <div class="marquee-content">
      {
        features.concat(features).map((feature, index) => (
          <div class="marquee-item">
            <FeatureSection
              title={feature.title}
              desc={feature.desc}
              image={feature.image}
              id={String(index + 1)}
              color={feature.color}
            />
          </div>
        ))
      }
    </div>
    <div class="fade-left"></div>
    <div class="fade-right"></div>
  </div>

  <style>
    body {
      overflow: hidden; /* Prevent scrolling */
    }

    .marquee-container {
      position: relative;
      overflow: hidden;
      white-space: nowrap;
      width: 90vw;
    }

    .marquee-content {
      display: inline-block;
      animation: marquee 90s linear infinite;
    }

    .marquee-item {
      display: inline-block;
      margin-right: 20px;
      max-width: 80vw;
    }

    @keyframes marquee {
      0% {
        transform: translateX(0); /* Start immediately with content visible */
      }
      100% {
        transform: translateX(-100%);
      }
    }

    .fade-left,
    .fade-right {
      position: absolute;
      top: 0;
      bottom: 0;
      width: 200px; /* Adjust width as needed */
      pointer-events: none; /* Allow clicks to pass through */
      z-index: 1;
    }

    .fade-left {
      left: 0;
      background: linear-gradient(
        to right,
        var(--primary-color),
        rgba(255, 255, 255, 0)
      );
    }

    .fade-right {
      right: 0;
      background: linear-gradient(
        to left,
        var(--primary-color),
        rgba(255, 255, 255, 0)
      );
    }

    .mythic-gradient-text {
      /* repeated but im not a webdev lol, see index.astro */
      display: inline;
      --bg-size: 400%;
      background: linear-gradient(
          90deg,
          var(--color-one),
          var(--color-two),
          var(--color-one)
        )
        0 0 / var(--bg-size) 100%;
      color: transparent;
      -webkit-background-clip: text;
      background-clip: text;
      animation: move-bg 40s infinite ease-in-out;
      margin-bottom: 0;
    }

    p {
      margin: 0;
      padding: 0;
      margin-bottom: 10px;
    }
  </style>

  <script>
    const APPCAST_URL = "https://getmythic.app/appcast.xml";

    async function fetchLatestRelease() {
      const response = await fetch(APPCAST_URL).catch((error) => {
        console.error("Error fetching latest release:", error);
        return null;
      });
      if (!response) return null;

      // Get the text of the response
      const text = await response.text().catch((error) => {
        console.error("Error reading response text:", error);
        return null;
      });
      if (!text) return null;

      // Parse the XML
      const parser = new DOMParser();
      const xml = parser.parseFromString(text, "text/xml");

      // Check for errors
      const error = xml.querySelector("parsererror");
      if (error) {
        console.error("Error parsing XML:", error);
        return null;
      }

      // Get the latest release
      const item = Array.from(xml.getElementsByTagName("item"))
        .map((item) => ({
          title: item.getElementsByTagName("title")[0]?.textContent ?? null,
          versionNumber:
            item.getElementsByTagName("sparkle:version")[0]?.textContent ??
            null,
          enclosure:
            item.getElementsByTagName("enclosure")[0]?.getAttribute("url") ??
            null,
        }))
        .filter(
          (item) =>
            item.title !== null &&
            item.versionNumber !== null &&
            item.enclosure !== null,
        );

      const itemNotNull = (
        item as { title: string; versionNumber: string; enclosure: string }[]
      )
        .map((item) => ({
          ...item,
          versionNumber: parseInt(item.versionNumber, 10),
        }))
        .filter((item) => !isNaN(item.versionNumber))
        .sort((a, b) => b.versionNumber - a.versionNumber);

      if (itemNotNull.length === 0) {
        console.error("No valid releases found");
        return null;
      }

      const latestRelease = itemNotNull[0];

      return latestRelease;
    }

    async function main() {
      const countdownTimer = document.getElementById("countdown-timer");
      if (!countdownTimer) return;

      let countdown = 3;

      const interval = setInterval(async () => {
        if (countdown === 0) {
          clearInterval(interval);

          const latestRelease = await fetchLatestRelease();
          if (!latestRelease) {
            alert("Error fetching latest release");
            return;
          }

          // Open that page to start the download :D
          window.location.href = latestRelease.enclosure;
        }

        countdownTimer.textContent = countdown.toString();
        countdown -= 1;
      }, 1000);
    }

    main();
  </script>
</Layout>
